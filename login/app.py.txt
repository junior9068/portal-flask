from flask import Flask, request, redirect, render_template, session, url_for
from onelogin.saml2.auth import OneLogin_Saml2_Auth
from onelogin.saml2.settings import OneLogin_Saml2_Settings
from onelogin.saml2.utils import OneLogin_Saml2_Utils
import json

app = Flask(__name__)
app.secret_key = 'your-secret-key'

def init_saml_auth(req):
    with open('saml_settings.json', 'r') as f:
        settings = json.load(f)
    auth = OneLogin_Saml2_Auth(req, settings)
    return auth

def prepare_flask_request(request):
    url_data = request.url_root.split('://')
    return {
        'https': 'on' if request.scheme == 'https' else 'off',
        'http_host': request.headers.get('Host', request.host),
        'server_port': request.environ.get('SERVER_PORT'),
        'script_name': request.path,
        'get_data': request.args.copy(),
        'post_data': request.form.copy()
    }

@app.route('/')
def index():
    if 'samlUserdata' in session:
        return render_template('attrs.html', 
                             attributes=session['samlUserdata'],
                             email=session.get('samlNameId'))
    return render_template('index.html')

@app.route('/saml/login')
def saml_login():
    req = prepare_flask_request(request)
    auth = init_saml_auth(req)
    return redirect(auth.login())

@app.route('/saml/acs', methods=['POST'])
def saml_acs():
    req = prepare_flask_request(request)
    auth = init_saml_auth(req)
    auth.process_response()
    
    errors = auth.get_errors()
    if len(errors) == 0:
        session['samlUserdata'] = auth.get_attributes()
        session['samlNameId'] = auth.get_nameid()
        session['samlSessionIndex'] = auth.get_session_index()
        return redirect('/')
    else:
        return f"Erro na autenticação: {', '.join(errors)}"

@app.route('/saml/sls', methods=['GET', 'POST'])
def saml_sls():
    req = prepare_flask_request(request)
    auth = init_saml_auth(req)
    url = auth.process_slo(delete_session_cb=lambda: session.clear())
    errors = auth.get_errors()
    if len(errors) == 0:
        return redirect(url or '/')
    else:
        return f"Erro no logout: {', '.join(errors)}"

@app.route('/logout')
def logout():
    req = prepare_flask_request(request)
    auth = init_saml_auth(req)
    return redirect(auth.logout())

if __name__ == '__main__':
    app.run(debug=True)
